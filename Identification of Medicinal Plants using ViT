{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:07.326309Z","iopub.execute_input":"2025-07-04T15:37:07.326694Z","iopub.status.idle":"2025-07-04T15:37:07.333068Z","shell.execute_reply.started":"2025-07-04T15:37:07.326655Z","shell.execute_reply":"2025-07-04T15:37:07.332099Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"!pip install -U -q evaluate transformers datasets>=2.14.5 mlflow 2>/dev/null\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:07.334800Z","iopub.execute_input":"2025-07-04T15:37:07.335207Z","iopub.status.idle":"2025-07-04T15:37:12.302873Z","shell.execute_reply.started":"2025-07-04T15:37:07.335181Z","shell.execute_reply":"2025-07-04T15:37:12.301570Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings(\"ignore\")  \n\nimport gc  \nimport numpy as np  \nimport pandas as pd  \nimport itertools  \nfrom collections import Counter  \nimport matplotlib.pyplot as plt  \nfrom sklearn.metrics import ( \n    accuracy_score,  \n    roc_auc_score,  \n    confusion_matrix,  \n    classification_report,  \n    f1_score  \n)\nimport evaluate  \nfrom datasets import Dataset, Image, ClassLabel \nfrom transformers import (  \n    TrainingArguments,  \n    Trainer,  \n    ViTImageProcessor, \n    ViTForImageClassification, \n    DefaultDataCollator \n)\nimport torch  \nfrom torch.utils.data import DataLoader  \nfrom torchvision.transforms import (  \n    CenterCrop,  \n    Compose,  \n    Normalize,  \n    RandomRotation,  \n    RandomResizedCrop,  \n    RandomHorizontalFlip,  \n    RandomAdjustSharpness, \n    Resize,  \n    ToTensor \n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:12.304205Z","iopub.execute_input":"2025-07-04T15:37:12.304570Z","iopub.status.idle":"2025-07-04T15:37:12.313436Z","shell.execute_reply.started":"2025-07-04T15:37:12.304536Z","shell.execute_reply":"2025-07-04T15:37:12.311860Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"from PIL import ImageFile\nImageFile.LOAD_TRUNCATED_IMAGES = True","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:12.317032Z","iopub.execute_input":"2025-07-04T15:37:12.317437Z","iopub.status.idle":"2025-07-04T15:37:12.336147Z","shell.execute_reply.started":"2025-07-04T15:37:12.317406Z","shell.execute_reply":"2025-07-04T15:37:12.334810Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"image_dict = {}\n\nfrom pathlib import Path\nfrom tqdm import tqdm\nimport os\nMIN_SAMPLES = 100 \n\nfile_names = []\nlabels = []\n\nfor file in sorted((Path('/kaggle/input/indian-medicinal-leaves-dataset/Indian Medicinal Leaves Image Datasets/').glob('*/*/*.jpg'))):\n    sample_dir = '/'.join(str(file).split('/')[:-1])+'/'\n    num_files_in_dir = [len(x) for _, _, x in os.walk(sample_dir)][0]\n    if num_files_in_dir >= MIN_SAMPLES:\n        file_names.append(str(file))  \n        label = str(file).split('/')[-2]  \n        labels.append(label)  \n\nprint(len(file_names), len(labels), len(set(labels)))\n\n\ndataset = Dataset.from_dict({\"image\": file_names, \"label\": labels}).cast_column(\"image\", Image())\n\n\ndataset[0][\"image\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:12.337320Z","iopub.execute_input":"2025-07-04T15:37:12.337626Z","iopub.status.idle":"2025-07-04T15:37:12.420800Z","shell.execute_reply.started":"2025-07-04T15:37:12.337602Z","shell.execute_reply":"2025-07-04T15:37:12.418809Z"}},"outputs":[{"name":"stdout","text":"0 0 0\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_35/2913039970.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m \u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"image\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/datasets/arrow_dataset.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2775\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__getitem__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# noqa: F811\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2776\u001b[0m         \u001b[0;34m\"\"\"Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools).\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2777\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2778\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2779\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeys\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/datasets/arrow_dataset.py\u001b[0m in \u001b[0;36m_getitem\u001b[0;34m(self, key, **kwargs)\u001b[0m\n\u001b[1;32m   2759\u001b[0m         \u001b[0mformat_kwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformat_kwargs\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mformat_kwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2760\u001b[0m         \u001b[0mformatter\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_formatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mformat_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mformat_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2761\u001b[0;31m         \u001b[0mpa_subtable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mquery_table\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindices\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_indices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2762\u001b[0m         formatted_output = format_table(\n\u001b[1;32m   2763\u001b[0m             \u001b[0mpa_subtable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformatter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mformatter\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat_columns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mformat_columns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_all_columns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moutput_all_columns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/datasets/formatting/formatting.py\u001b[0m in \u001b[0;36mquery_table\u001b[0;34m(table, key, indices)\u001b[0m\n\u001b[1;32m    605\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    606\u001b[0m         \u001b[0msize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnum_rows\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mindices\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mtable\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnum_rows\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 607\u001b[0;31m         \u001b[0m_check_valid_index_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    608\u001b[0m     \u001b[0;31m# Query the main table\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    609\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mindices\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/datasets/formatting/formatting.py\u001b[0m in \u001b[0;36m_check_valid_index_key\u001b[0;34m(key, size)\u001b[0m\n\u001b[1;32m    545\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    546\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0msize\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0msize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 547\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Invalid key: {key} is out of bounds for size {size}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    548\u001b[0m         \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    549\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: Invalid key: 0 is out of bounds for size 0"],"ename":"IndexError","evalue":"Invalid key: 0 is out of bounds for size 0","output_type":"error"}],"execution_count":19},{"cell_type":"code","source":"labels_subset = labels[:5]\nprint(labels_subset)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:12.421387Z","iopub.status.idle":"2025-07-04T15:37:12.421674Z","shell.execute_reply.started":"2025-07-04T15:37:12.421542Z","shell.execute_reply":"2025-07-04T15:37:12.421553Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"labels_list = list(set(labels))\n\nlabel2id, id2label = dict(), dict()\n\nfor i, label in enumerate(labels_list):\n    label2id[label] = i \n    id2label[i] = label  \n\nprint(\"Mapping of IDs to Labels:\", id2label, '\\n')\nprint(\"Mapping of Labels to IDs:\", label2id)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:12.422443Z","iopub.status.idle":"2025-07-04T15:37:12.422780Z","shell.execute_reply.started":"2025-07-04T15:37:12.422644Z","shell.execute_reply":"2025-07-04T15:37:12.422657Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model_str = 'google/vit-base-patch16-224-in21k'\n\nprocessor = ViTImageProcessor.from_pretrained(model_str)\n\nimage_mean, image_std = processor.image_mean, processor.image_std\n\nsize = processor.size[\"height\"]\nprint(\"Size: \", size)\n\nnormalize = Normalize(mean=image_mean, std=image_std)\n\n_train_transforms = Compose(\n    [\n        Resize((size, size)),             \n        RandomRotation(30),               \n        RandomAdjustSharpness(2),         \n        ToTensor(),                       \n        normalize                         \n    ]\n)\n\n_val_transforms = Compose(\n    [\n        Resize((size, size)),             \n        ToTensor(),                       \n        normalize                        \n    ]\n)\n\ndef train_transforms(examples):\n    examples['pixel_values'] = [_train_transforms(image.convert(\"RGB\")) for image in examples['image']]\n    return examples\n\ndef val_transforms(examples):\n    examples['pixel_values'] = [_val_transforms(image.convert(\"RGB\")) for image in examples['image']]\n    return examples","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:12.423897Z","iopub.status.idle":"2025-07-04T15:37:12.424208Z","shell.execute_reply.started":"2025-07-04T15:37:12.424080Z","shell.execute_reply":"2025-07-04T15:37:12.424093Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_data.set_transform(train_transforms)\n\ntest_data.set_transform(val_transforms)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:12.424992Z","iopub.status.idle":"2025-07-04T15:37:12.425263Z","shell.execute_reply.started":"2025-07-04T15:37:12.425132Z","shell.execute_reply":"2025-07-04T15:37:12.425148Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def collate_fn(examples):\n    \n    pixel_values = torch.stack([example[\"pixel_values\"] for example in examples])\n    \n    labels = torch.tensor([example['label'] for example in examples])\n    \n    return {\"pixel_values\": pixel_values, \"labels\": labels}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:12.426655Z","iopub.status.idle":"2025-07-04T15:37:12.427052Z","shell.execute_reply.started":"2025-07-04T15:37:12.426838Z","shell.execute_reply":"2025-07-04T15:37:12.426856Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model = ViTForImageClassification.from_pretrained(model_str, num_labels=len(labels_list))\n\nmodel.config.id2label = id2label\nmodel.config.label2id = label2id\n\nprint(model.num_parameters(only_trainable=True) / 1e6)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:12.428621Z","iopub.status.idle":"2025-07-04T15:37:12.429067Z","shell.execute_reply.started":"2025-07-04T15:37:12.428846Z","shell.execute_reply":"2025-07-04T15:37:12.428867Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"accuracy = evaluate.load(\"accuracy\")\n\ndef compute_metrics(eval_pred):\n    predictions = eval_pred.predictions\n    \n    label_ids = eval_pred.label_ids\n    \n    predicted_labels = predictions.argmax(axis=1)\n    acc_score = accuracy.compute(predictions=predicted_labels, references=label_ids)['accuracy']\n    \n    return {\n        \"accuracy\": acc_score\n    }","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:12.430729Z","iopub.status.idle":"2025-07-04T15:37:12.431169Z","shell.execute_reply.started":"2025-07-04T15:37:12.430982Z","shell.execute_reply":"2025-07-04T15:37:12.431001Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"metric_name = \"accuracy\"\n\nmodel_name = \"medicinal_plants_image_detection\"\n\nnum_train_epochs = 20\n\nargs = TrainingArguments(\n    output_dir=model_name,\n    \n    logging_dir='./logs',\n    evaluation_strategy=\"epoch\",\n    \n    learning_rate=1e-5,\n    \n    per_device_train_batch_size=32,\n    \n    per_device_eval_batch_size=8,\n    \n    num_train_epochs = num_train_epochs,\n    \n    weight_decay=0.02,\n    warmup_steps=50,\n    \n    remove_unused_columns=False,\n    \n    save_strategy='epoch',\n    \n    load_best_model_at_end=True,\n    \n    save_total_limit=1,\n    \n    report_to=\"mlflow\"  \n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:12.432408Z","iopub.status.idle":"2025-07-04T15:37:12.432793Z","shell.execute_reply.started":"2025-07-04T15:37:12.432607Z","shell.execute_reply":"2025-07-04T15:37:12.432625Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rainer = Trainer(\n    model,\n    args,\n    train_dataset=train_data,\n    eval_dataset=test_data,\n    data_collator=collate_fn,\n    compute_metrics=compute_metrics,\n    tokenizer=processor,","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:12.433907Z","iopub.status.idle":"2025-07-04T15:37:12.434285Z","shell.execute_reply.started":"2025-07-04T15:37:12.434114Z","shell.execute_reply":"2025-07-04T15:37:12.434130Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"trainer.evaluate()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-04T15:37:12.435964Z","iopub.status.idle":"2025-07-04T15:37:12.436546Z","shell.execute_reply.started":"2025-07-04T15:37:12.436304Z","shell.execute_reply":"2025-07-04T15:37:12.436326Z"}},"outputs":[],"execution_count":null}]}